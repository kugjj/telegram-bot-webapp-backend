# bot.py
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
import database
import os
import random

# –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
FACTS = [
    "–ó–Ω–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî –∂–µ–Ω—â–∏–Ω–∞? –ï—ë –∑–≤–∞–ª–∏ –ê–¥–∞ –õ–∞–≤–ª–µ–π—Å.",
    "–°–º–∞—Ä—Ç—Ñ–æ–Ω —Å–µ–≥–æ–¥–Ω—è –º–æ—â–Ω–µ–µ, —á–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–≤—à–∏–µ –ª—é–¥–µ–π –Ω–∞ –õ—É–Ω—É.",
    "–°–ª–æ–≤–æ '–±–∞–≥' (–æ—à–∏–±–∫–∞) –ø–æ—è–≤–∏–ª–æ—Å—å, –∫–æ–≥–¥–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–ª–µ—Ç–µ–ª –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ—Ç—ã–ª—ë–∫.",
    "Google –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ –Ω–∞ —Ä–µ–∫–ª–∞–º–µ, —á–µ–º –≤—Å–µ –°–ú–ò –º–∏—Ä–∞ –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã–µ.",
    "–í 2025 –≥–æ–¥—É –≤ –º–∏—Ä–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —á–µ–º –ª—é–¥–µ–π."
]

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = "https://kugjj.github.io"  # ‚ö†Ô∏è –ü–û–ú–ï–ù–Ø–ô!
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    user = message.from_user
    database.add_user({
        "id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name
    })
    database.log_action(user.id, "started_bot")

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    kb = [
        [types.KeyboardButton(text="üìö –ü–æ–º–æ—â—å"), types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"), types.KeyboardButton(text="üß† –§–∞–∫—Ç")],
        [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), types.KeyboardButton(text="üìä WebApp")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É..."
    )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –±–æ—Ç —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )

@dp.message(Command("admin"))
async def admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    all_actions = database.get_all_actions()
    text = "\n".join([f"[{a['time']}] {a['user']}: {a['action']}" for a in all_actions[:30]])
    await message.answer(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–µ–π—Å—Ç–≤–∏–π:\n\n{text}")

@dp.message(F.text == "üìö –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    text = (
        "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "‚Ä¢ /profile ‚Äî —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user = message.from_user
    database.log_action(user.id, "viewed_profile")
    text = (
        "üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        f"‚Ä¢ –ò–º—è: {user.first_name}\n"
        f"‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚Ä¢ ID: `{user.id}`\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {user.language_code}"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    kb = [
        [types.InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notify")],
        [types.InlineKeyboardButton(text="üé® –¢–µ–º–∞", callback_data="settings_theme")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=keyboard)

@dp.message(F.text == "üìä WebApp")
async def open_webapp(message: types.Message):
    kb = [[types.InlineKeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app=types.WebAppInfo(url=WEBAPP_URL))]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("–û—Ç–∫—Ä–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:", reply_markup=keyboard)

@dp.message(Command("fact"))
async def cmd_fact(message: types.Message):
    user = message.from_user
    database.log_action(user.id, "viewed_fact")
    fact = random.choice(FACTS)
    await message.answer(f"üß† <i>{fact}</i>", parse_mode="HTML")

@dp.message(Command("achievements"))
async def cmd_achievements(message: types.Message):
    user = message.from_user
    database.log_action(user.id, "viewed_achievements")

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    actions = database.get_user_actions(user.id)
    action_count = len(actions)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = []
    if action_count >= 5:
        achievements.append("üî• –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–¥–µ–ª–∞–ª 5+ –¥–µ–π—Å—Ç–≤–∏–π")
    if action_count >= 10:
        achievements.append("üèÜ –ú–∞—Å—Ç–µ—Ä –±–æ—Ç–∞ ‚Äî 10+ –¥–µ–π—Å—Ç–≤–∏–π")
    if any(a["action"] == "viewed_profile" for a in actions):
        achievements.append("üëÄ –õ—é–±–æ–ø—ã—Ç–Ω—ã–π ‚Äî —Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å")
    if any(a["action"] == "started_bot" for a in actions):
        achievements.append("üëã –ù–æ–≤–∏—á–æ–∫ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –ø—É—Ç—å")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üèÜ <b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
    if achievements:
        text += "\n".join(f"‚Ä¢ {ach}" for ach in achievements)
    else:
        text += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ... –ù–æ —Ç—ã –º–æ–∂–µ—à—å —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å!"

    await message.answer(text, parse_mode="HTML")
async def main():
    await dp.start_polling(bot)

@dp.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: types.Message):
    await cmd_achievements(message)

@dp.message(F.text == "üß† –§–∞–∫—Ç")
async def show_fact(message: types.Message):
    await cmd_fact(message)
    
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())









