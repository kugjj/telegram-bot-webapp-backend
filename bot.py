# bot.py
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
import database
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = "https://kugjj.github.io"  # ‚ö†Ô∏è –ü–û–ú–ï–ù–Ø–ô!
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    user = message.from_user
    database.add_user({
        "id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name
    })
    database.log_action(user.id, "started_bot")

    kb = [[types.InlineKeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", web_app=types.WebAppInfo(url=WEBAPP_URL))]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.", reply_markup=keyboard)

@dp.message(Command("admin"))
async def admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    all_actions = database.get_all_actions()
    text = "\n".join([f"[{a['time']}] {a['user']}: {a['action']}" for a in all_actions[:30]])
    await message.answer(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–µ–π—Å—Ç–≤–∏–π:\n\n{text}")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    text = (
        "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "‚Ä¢ /profile ‚Äî —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
        "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "WebApp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user = message.from_user
    database.log_action(user.id, "viewed_profile")
    text = (
        "üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        f"‚Ä¢ –ò–º—è: {user.first_name}\n"
        f"‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚Ä¢ ID: `{user.id}`\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {user.language_code}"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    kb = [
        [types.InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notify")],
        [types.InlineKeyboardButton(text="üé® –¢–µ–º–∞", callback_data="settings_theme")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=keyboard)

@dp.callback_query(F.data == "settings_notify")
async def settings_notify(callback: types.CallbackQuery):
    await callback.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")

@dp.callback_query(F.data == "settings_theme")
async def settings_theme(callback: types.CallbackQuery):
    await callback.answer("–¢–µ–º–∞: —Å–≤–µ—Ç–ª–∞—è")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())






